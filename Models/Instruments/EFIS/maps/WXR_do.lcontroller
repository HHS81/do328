# See: http://wiki.flightgear.org/MapStructure
# Class things:
var name = 'WXR_do'; # for waypoints
var parents = [SymbolLayer.Controller];
var __self__ = caller(0)[0];
SymbolLayer.Controller.add(name, __self__);
SymbolLayer.add(name, {
	parents: [MultiSymbolLayer],
	type: name, # Symbol type
	df_controller: __self__, # controller to use by default -- this one
	df_options: { # default configuration options
		active_node: "instrumentation/efis/wxGmap1"
	}
});
var new = func(layer) {
	var m = {
		parents: [__self__],
		layer: layer,
		options: layer.options,
		map: layer.map,
		listeners: [],
	};
	layer.searcher._equals = func(l,r) l.equals(r);
	m.addVisibilityListener();

	return m;
};
var del = func() {
	#print(name~"VOR.lcontroller.del()");
	foreach (var l; me.listeners)
		removelistener(l);
};

var WXR_do_model = {
	new: func(n, idx, offset=0) {
		var m = { parents:[WXR_do_model], idx:(idx+offset) };
		m.id = idx;
		
		m.lat = n.getNode("position/latitude-deg").getValue();
		m.lon = n.getNode("position/longitude-deg").getValue();
		#print(m.lat," ",m.lon);
		return m;
	},
	equals: func(other) {
		# this is set on symbol init, so use this for equality...
		me.id == other.id
	},
};

var clouds = 0;
var cloudSize = 0;
var searchCmd = func {
	clouds = props.globals.getNode("/local-weather/clouds/tile[1]",1).getChildren("cloud");
	cloudSize = size(clouds);
	var result = [];
	for (var i = 0; i < cloudSize; i+=1)
		append(result, WXR_do_model.new(clouds[i], i));
	return result;
};

